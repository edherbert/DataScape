{"version":3,"sources":["app/initialize.js","app/src/DataGenerator/DataGenerator.js","app/src/DataGenerator/FieldGenerator.js","app/src/DataGenerator/TableLinker.js","app/src/DataGenerator/TableParser.js","app/src/FieldType.js","app/src/Main.js","app/src/StorageManager.js","app/src/StructureManager.js","app/src/TypeManager/FieldType.js","app/src/TypeManager/TypeManager.js","app/src/TypeManager/types/AgeType.js","app/src/TypeManager/types/BooleanType.js","app/src/TypeManager/types/BornCountry.js","app/src/TypeManager/types/CityType.js","app/src/TypeManager/types/CountyType.js","app/src/TypeManager/types/CurrencyType.js","app/src/TypeManager/types/EmailType.js","app/src/TypeManager/types/FirstNameType.js","app/src/TypeManager/types/GenderType.js","app/src/TypeManager/types/JobType.js","app/src/TypeManager/types/LanguageType.js","app/src/TypeManager/types/MovieTitleType.js","app/src/TypeManager/types/PhoneNumberType.js","app/src/TypeManager/types/PostcodeType.js","app/src/TypeManager/types/RandomColourType.js","app/src/TypeManager/types/ReligionType.js","app/src/TypeManager/types/SecondNameType.js","app/src/TypeManager/types/ShirtSizeType.js","app/src/TypeManager/types/TestType.js","app/src/TypeManager/types/TitleType.js","app/src/pages/ConfirmDeletePopup.js","app/src/pages/DatabaseCreationPopup.js","app/src/pages/DatabaseEditPopup.js","app/src/pages/DatabaseSelectionView.js","app/src/pages/DiagramView.js","app/src/pages/ForeignKeySelectionPopup.js","app/src/pages/GeneratedDataPopup.js","app/src/pages/PageManager.js","app/src/pages/Popup.js","app/src/pages/TableEditorView.js","app/src/pages/TestView.js","app/src/pages/TypeSelectionPopup.js","app/src/pages/View.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5EA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbvHA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5EA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAblIA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/DA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhEA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7DA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApvPA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjEA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhnJA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhxBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhEA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA","file":"public/app.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\n  //Setup and things\n  require(\"src/Main\");\n});\n","const TableParser = require('./TableParser');\nconst FieldGenerator = require('./FieldGenerator');\nconst TableLinker = require('./TableLinker');\nconst structureManager = require('../StructureManager');\nconst GeneratedDataPopup = require('../pages/GeneratedDataPopup');\n\nfunction DataGenerator(pageManager){\n  //Create new instances of the individual parts of the data generator.\n  this.tableParser = new TableParser();\n  this.fieldGenerator = new FieldGenerator();\n  this.tableLinker = new TableLinker();\n  this.generatedDataPopup = new GeneratedDataPopup();\n  this.pageManager = pageManager;\n}\n\nDataGenerator.prototype = {\n  constructor: DataGenerator,\n\n  generateData: function(pageManager){\n    //Pass the outputted data through the stages of the generator until the finished version is reached.\n    let currentStructure = structureManager.getStructure();\n\n    let parsedTables = this.tableParser.parseStructure(currentStructure);\n\n    let generatedData = this.fieldGenerator.generateData(parsedTables);\n\n    let linkedTables = this.tableLinker.linkTables(generatedData);\n\n    return linkedTables;\n  }\n};\n\nmodule.exports = DataGenerator;\n","const typeManager = require('../TypeManager/TypeManager');\n\nfunction FieldGenerator(){\n\n}\n\nFieldGenerator.prototype = {\n  generateData: function(parsedTables){\n    //Go through each table and generate it's data\n\n    for(t = 0; t < parsedTables.tables.length; t++){\n      parsedTables.tables[t].data = [];\n\n      //Traverse the list by types, rather than tables.\n      //This will avoid having to jump around through memory as all the types can be batched together.\n      for(f = 0; f < parsedTables.tables[t].typeOrder.length; f++){\n        //Store the type so the lookup only has to happen once.\n        let type = typeManager.getFieldType(parsedTables.tables[t].typeOrder[f]);\n        //Generate it for the required ammount\n        for(y = 0; y < parsedTables.tables[t].requiredAmmount; y++){\n          //Generate the data.\n          parsedTables.tables[t].data[y] = type.generate(parsedTables.tables[t].data[y]);\n        }\n      }\n    }\n\n    return parsedTables;\n  }\n};\n\nmodule.exports = FieldGenerator;\n","function TableLinker(){\n\n}\n\nTableLinker.prototype = {\n  linkTables: function(previous){\n    for(t = 0; t < previous.tables.length; t++){\n      //Go through all tables are create an intermediate place to store the finished data.\n      previous.tables[t].done = [];\n      //Go through the tables for the ammount of data that would be generated.\n      for(i = 0; i < previous.tables[t].requiredAmmount; i++){\n        //Temporary place to store the data before it's pushed.\n        let temp = {};\n\n        //Go over all the types in the table.\n        for(x = 0; x < previous.tables[t].types.length; x++){\n          let fieldType = previous.tables[t].types[x].fieldType;\n          //If the value is a foreign key then assign it a value between the bounds.\n          if(fieldType == \"Foreign Key\"){\n            //Get the table that the foreign key references and get it's size.\n            //Then generate a random number between that. This will be used as the foreign key.\n\n            //temp[previous.tables[t].types[x].fieldName] = Math.floor(Math.random() * randomAmmount);\n          }else{\n            //Assign temp the generated value under it's desired name.\n            //If a table has the same name for a field twice this will make it only appear once.\n            temp[previous.tables[t].types[x].fieldName] = previous.tables[t].data[i][fieldType];\n          }\n        }\n        //Push the new value into the json.\n        previous.tables[t].done.push(temp);\n      }\n      //At this point the generated data can be deleted to conserve memory.\n      delete previous.tables[t].data;\n    }\n\n    return previous;\n  }\n};\n\nmodule.exports = TableLinker;\n","const typeManager = require('../TypeManager/TypeManager');\n\nfunction TableParser(){\n\n}\n\nTableParser.prototype = {\n  constructor: TableParser,\n\n  parseStructure: function(structure){\n    for(t = 0; t < structure.tables.length; t++){\n      requirements = [];\n      //Go through the tables and make a list of the requirements.\n      for(i = 0; i < structure.tables[t].types.length; i++){\n        //Push as a string.\n        requirements.push(\"\"+structure.tables[t].types[i].fieldType);\n      }\n\n      for(i = 0; i < requirements.length; i++){\n        //If the requirement is a normal field type (not a foreign Key).\n        if(requirements[i] != \"Foreign Key\"){\n          if(!this.checkIfListed(requirements[i])){\n            //Go through the requirements and add them to the list.\n            this.traverseRequirements(requirements[i]);\n            this.done.push(requirements[i]);\n          }\n        }\n      }\n\n      structure.tables[t].typeOrder = this.done;\n\n      //Reset the done list after use.\n      this.done = [];\n    }\n    return structure;\n  },\n  done: [],\n\n  traverseRequirements: function(requirements){\n    //Recursively search the requirement tree until the leaf nodes are found.\n    var newRequirements = typeManager.getRequirements(requirements);\n    //Determine if there are any requirements to traverse.\n    if(newRequirements.length <= 0){\n      //console.log(\"Empty\");\n    }else{\n      for(y = 0; y < newRequirements.length; y++){\n        //Go through them. Check if any of them are undefined (null)\n        if(newRequirements[y] == undefined) {\n          console.log(\"undefined in the table parser.\");\n          continue;\n        }\n        //If it's not already in the list then add it.\n        //If it's already in the list then don't bother traversing it either.\n        if(!this.checkIfListed(newRequirements[y])){\n          this.traverseRequirements(newRequirements[y]);\n          this.done.push(newRequirements[y]);\n        }\n      }\n    }\n  },\n\n  //Check if a requirement exists in the done list.\n  checkIfListed: function(val){\n    var exists = false;\n    for(z = 0; z < this.done.length; z++){\n      if(val == this.done[z]){\n        exists = true;\n        break;\n      }\n    }\n\n    return exists;\n  }\n};\n\nmodule.exports = TableParser;\n","function FieldType(){\n\n}\n\nFieldType.prototype = {\n\tRequirements: [],\n\n\tGenerate: function(previous){\n\t\treturn previous;\n}\n};\n\nmodule.exports = FieldType;\n","const pageManager = require(\"./pages/PageManager\");\nconst dataGenerator = require(\"./DataGenerator/DataGenerator\")\n\n//Start by showing the database selection view.\npageManager.showDatabaseSelectionView();\n","const structureManager = require('./StructureManager');\r\n\r\nvar StorageManager = function (){\r\n\r\n}\r\n\r\nStorageManager.prototype = {\r\n\t//Create or override an existing database.\r\n\t//This will not add it to the list.\r\n\tstoreDatabase: function(title, database){\r\n\t\tlocalStorage.setItem(title, JSON.stringify(database));\r\n\t\tconsole.log(\"Storing database \" + title);\r\n\t},\r\n\r\n\tremoveDatabase: function(databaseName){\r\n\t\tlocalStorage.removeItem(databaseName);\r\n\r\n\t\tlet list = this.getDatabasesList();\r\n\r\n\t\t//Go through the list and remove the database if it's found\r\n\t\tlet found = false;\r\n\t\tfor(t = 0; t < list.length; t++){\r\n\t\t\tif(list[t] == databaseName){\r\n\t\t\t\tlist.splice(t, 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Set the list without the database to the current one.\r\n\t\tthis.setDatabasesList(list);\r\n\t},\r\n\r\n\tretrieveDatabase: function(databaseName){\r\n\t\t//Go through the database. If it's found then return it.\r\n\t\tlet retrieved = localStorage.getItem(databaseName);\r\n\t\tif(retrieved == null){\r\n\t\t\tconsole.log(\"Can't retrieve database \" + databaseName + \".\");\r\n\t\t\treturn null;\r\n\t\t}else{\r\n\t\t\t//Return the database as a json.\r\n\t\t\treturn JSON.parse(retrieved);\r\n\t\t}\r\n\t},\r\n\r\n\t//Create a database and add it to the list\r\n\tcreateDatabase: function(title){\r\n\t\tlet list = this.getDatabasesList();\r\n\t\tlist.push(title);\r\n\t\t//Push the new database's title to the list.\r\n\t\tthis.setDatabasesList(list);\r\n\r\n\t\t//Create a database in storage.\r\n\t\tlet bareDatabase = {\r\n\t\t\ttables: [],\r\n\t\t\tconnectors: []\r\n\t\t};\r\n\t\tthis.storeDatabase(title, bareDatabase);\r\n\t},\r\n\r\n\trenameDatabase: function(oldName, newName){\r\n\t\t//Renaming involves removing the old one and creating a new one.\r\n\t\tlet oldDb = this.retrieveDatabase(oldName);\r\n\t\tlet oldList = this.getDatabasesList();\r\n\r\n\t\tlet found = false;\r\n\t\tfor(t = 0; t < oldList.length; t++){\r\n\t\t\tif(oldList[t] == oldName){\r\n\t\t\t\tif(newName.match(\"^[a-zA-Z1-9_]+$\")){\r\n\t\t\t\t\tfound = true;\r\n\r\n\t\t\t\t\t//Set the new name over the old one if the new name contains no illegal characters.\r\n\t\t\t\t\toldList[t] = newName;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Check to see if that database exists in the databases list as well as if it's key can be found.\r\n\t\tif(oldDb == null || !found){\r\n\t\t\talert(\"Cannot rename database as that database either does not exist, or contains illegal characters.\");\r\n\t\t\treturn false;\r\n\t\t}else{\r\n\t\t\tconsole.log(\"Renaming \" + oldName + \" to \" + newName + \".\");\r\n\t\t\tthis.setDatabasesList(oldList);\r\n\r\n\t\t\t//Remove the old one and store the new one.\r\n\t\t\tlocalStorage.removeItem(oldName);\r\n\t\t\tthis.storeDatabase(newName, oldDb);\r\n\t\t}\r\n\t\treturn true;\r\n\t},\r\n\r\n\tsetDatabasesList: function(list){\r\n\t\t//Set the list of database titles.\r\n\t\tlocalStorage.setItem(\"databasesList\", JSON.stringify(list));\r\n\t},\r\n\r\n\tgetDatabasesList: function(){\r\n\t\t//Return the list of databases from storage.\r\n\t\tlet list = localStorage.getItem(\"databasesList\");\r\n\t\tif(list == \"\" || list == null){\r\n\t\t\tlist = [];\r\n\t\t}\r\n\r\n\t\t//If the list cannot be parsed then return an empty array.\r\n\t\ttry{\r\n\t\t\tlist = JSON.parse(list);\r\n\t\t}catch(e){\r\n\t\t\tlist = [];\r\n\t\t}\r\n\r\n\t\treturn list;\r\n\t},\r\n\r\n\tsaveDatabaseStructure: function(dbName){\r\n\t\tthis.storeDatabase(dbName, structureManager.getStructure());\r\n\t}\r\n};\r\n\r\nmodule.exports = new StorageManager();\r\n","function StructureManager(){\r\n  this.structure = {};\r\n}\r\n\r\nStructureManager.prototype = {\r\n  constructor: StructureManager,\r\n\r\n  getStructure: function(){\r\n    return this.structure\r\n  },\r\n\r\n  setStructure: function(s){\r\n    this.structure = s;\r\n  },\r\n\r\n  getTableIndexById: function(id){\r\n    //Get the table's array index from it's mxid.\r\n    for(t = 0; t < this.structure.tables.length; t++){\r\n      if(this.structure.tables[t].tableId == id){\r\n        return t;\r\n      }\r\n    }\r\n  },\r\n\r\n  getTableById: function(id){\r\n    //Return the table json by id.\r\n    return this.structure.tables[this.getTableIndexById(id)];\r\n  },\r\n\r\n  replaceTable: function(id, table){\r\n    //Override the table data with new data.\r\n    this.structure.tables[this.getTableIndexById(id)] = table;\r\n  },\r\n\r\n  setTableTitle: function(id, title){\r\n    this.structure.tables[this.getTableIndexById(id)].title = title;\r\n  },\r\n\r\n  setTableTypes: function(id, types){\r\n    //Set the list of field types to use in this table.\r\n    this.structure.tables[this.getTableIndexById(id)].types = types;\r\n  },\r\n\r\n  pushTable: function(table){\r\n    //Add a new table json to the list.\r\n    this.structure.tables.push(table);\r\n  },\r\n\r\n  setTablePosition: function(id, x, y){\r\n    let tableIndex = this.getTableIndexById(id);\r\n    this.structure.tables[tableIndex].x = x;\r\n    this.structure.tables[tableIndex].y = y;\r\n  },\r\n\r\n  setTableSize: function(id, width, height){\r\n    let tableIndex = this.getTableIndexById(id);\r\n    this.structure.tables[tableIndex].width = width;\r\n    this.structure.tables[tableIndex].height = height;\r\n  },\r\n\r\n  removeTable: function(id){\r\n    let tableIndex = this.getTableIndexById(id);\r\n    this.structure.tables.splice(tableIndex, 1);\r\n  },\r\n\r\n  addEdge: function(source, target){\r\n    //Create a new edge and add it to the list.\r\n    let newEdge = {originTable: 0, destinationTable: 0, type: \"One to many\"};\r\n    newEdge.originTable = this.getTableIndexById(source);\r\n    newEdge.destinationTable = this.getTableIndexById(target);\r\n\r\n    this.structure.connectors.push(newEdge);\r\n  }\r\n};\r\n\r\nmodule.exports = new StructureManager();\r\n","function FieldType(){\n\n}\n\nFieldType.prototype = {\n\tRequirements: [],\n\n\tgenerate: function(previous){\n\t\treturn previous;\n}\n};\n\nmodule.exports = FieldType;\n","const TestType = require('./types/TestType');\nconst FirstNameType = require('./types/FirstNameType');\nconst SecondNameType = require('./types/SecondNameType');\nconst GenderType = require('./types/GenderType');\nconst PostcodeType = require('./types/PostcodeType');\nconst RandomColourType = require('./types/RandomColourType'); //Reference/including from another class\nconst BooleanType = require('./types/BooleanType');\nconst EmailType = require('./types/EmailType');\nconst PhoneNumberType = require('./types/PhoneNumberType');\nconst TitleType = require('./types/TitleType');\nconst AgeType = require('./types/AgeType');\nconst CityType = require('./types/CityType');\nconst BornCountry = require('./types/BornCountry');\nconst ReligionType = require('./types/ReligionType');\nconst CountyType = require('./types/CountyType');\nconst CurrencyType = require('./types/CurrencyType');\nconst ShirtSizeType = require('./types/ShirtSizeType');\nconst MovieTitleType = require('./types/MovieTitleType');\nconst JobType = require('./types/JobType');\nconst LanguageType = require('./types/LanguageType');\n\nfunction TypeManager(){\n  //Create a new instance of each type.\n  this.testType = new TestType();\n  this.firstNameType = new FirstNameType();\n  this.secondNameType = new SecondNameType();\n  this.genderType = new GenderType();\n  this.postcodeType = new PostcodeType();\n  this.randomColourType = new RandomColourType();\n  this.booleanType = new BooleanType();\n  this.emailType = new EmailType();\n  this.phoneNumberType = new PhoneNumberType();\n  this.titleType = new TitleType();\n  this.ageType = new AgeType();\n  this.cityType = new CityType();\n  this.bornCountryType = new BornCountry();\n  this.religionType = new ReligionType();\n  this.countyType = new CountyType();\n  this.jobType = new JobType();\n  this.currencyType = new CurrencyType();\n  this.shirtSizeType = new ShirtSizeType();\n  this.movieTitleType = new MovieTitleType();\n  this.languageType = new LanguageType();\n\n  //List the types so they can be retrieved later.\n  this.typeNames = [\"First Name\", \"Second Name\", \"Gender\", \"Postcode\", \"Random Colour\", \"Boolean\", \"Email\",\n  \"Phone Number\", \"Title\", \"Age\", \"City\", \"Born Country\", \"Religion\", \"County\",  \"Shirt Size\", \"Movie Title\", \"Currency\",\n  \"Job\", \"Language\"\n  ];\n}\n\nTypeManager.prototype = {\n  getFieldType: function(fieldTypeName){\n      switch(fieldTypeName){\n        case \"TestType\":\n          return this.testType;\n          break;\n        case \"First Name\":\n          return this.firstNameType;\n          break;\n        case \"Second Name\":\n          return this.secondNameType;\n          break;\n        case \"Gender\":\n          return this.genderType;\n          break;\n        case \"Postcode\":\n          return this.postcodeType;\n          break;\n\t\t    case \"Random Colour\":\n\t\t      return this.randomColourType;\n\t\t      break;\n\t\t    case \"Boolean\":\n\t\t\t    return this.booleanType;\n\t\t\t    break;\n        case \"Email\":\n  \t\t\t  return this.emailType;\n  \t\t\t  break;\n        case \"Phone Number\":\n          return this.phoneNumberType;\n          break;\n        case \"Title\":\n  \t\t\t  return this.titleType;\n  \t\t\t  break;\n        case \"Age\":\n          return this.ageType;\n          break;\n        case \"City\":\n          return this.cityType;\n          break;\n        case \"Born Country\":\n          return this.bornCountryType;\n          break;\n        case \"Religion\":\n          return this.religionType;\n          break;\n        case \"County\":\n          return this.countyType;\n          break;\n        case \"Shirt Size\":\n          return this.shirtSizeType;\n          break;\n        case \"Movie Title\":\n          return this.movieTitleType;\n          break;\n      \tcase \"Currency\":\n          return this.currencyType;\n          break;\n      \tcase \"Job\":\n          return this.jobType;\n          break;\n      \tcase \"Language\":\n          return this.languageType;\n          break;\n        default:\n          console.log(\"No type was found for \" + fieldTypeName);\n          break;\n      }\n  },\n\n  getRequirements: function(fieldTypeName){\n    return this.getFieldType(fieldTypeName).Requirements;\n  },\n\n  getTypesList: function(){\n    return this.typeNames;\n  }\n};\n\nmodule.exports = new TypeManager;\n","const FieldType = require(\"../FieldType\");\n\nfunction AgeType(){\n}\n\nAgeType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: AgeType,\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let target = \"\";\n    target = String(Math.floor(Math.random() * 60) + 15)\n    current.Age = target;\n\n    return current;\n  }\n});\n\nmodule.exports = AgeType;\n","const FieldType = require(\"../FieldType\");\n\nfunction BooleanType(){\n}\n\nBooleanType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: BooleanType,\n\n  generate: function(previous){\n\n\tlet current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let target = \"\";\n    if(Math.random() * 2 <= 1){\n      target = \"true\";\n    }else{\n      target = \"false\";\n    }\n    current.Boolean = target;\n\n    return current;\n  }\n});\n\nmodule.exports = BooleanType;\n","const FieldType = require(\"../FieldType\");\r\n\r\nfunction CountryType(){\r\n  this.country = ['England', 'Scoland', 'Ireland', 'Poland', 'India', 'Pakistan', 'Germany', 'South Africa', 'United State', 'Australia', 'China'];\r\n}\r\n\r\nCountryType.prototype = Object.assign(Object.create(FieldType.prototype), {\r\n  constructor: CountryType,\r\n\r\n  generate: function(previous){\r\n    let current = previous;\r\n    if(typeof previous == 'undefined') current = {};\r\n\r\n    let target = \"\";\r\n    target = this.country[Math.floor(Math.random() * this.country.length)]\r\n    current['Born Country'] = target;\r\n\r\n    return current;\r\n  }\r\n});\r\n\r\nmodule.exports = CountryType;\r\n","const FieldType = require(\"../FieldType\");\n\nfunction CityType(){\n  this.cities = ['Reading', 'London', 'Oxford', 'Cambridge', 'Portsmouth', 'Exeter', 'Plymouth', 'Brighton', 'Blackpool', 'Birmingham', 'Tiverton', 'Aberdeen', 'Swansea', 'Cardiff', 'Dorchester'];\n}\n\nCityType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: CityType,\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let target = \"\";\n    target = this.cities[Math.floor(Math.random() * this.cities.length)]\n    current.City = target;\n\n    return current;\n  }\n});\n\nmodule.exports = CityType;\n","const FieldType = require(\"../FieldType\");\n\nfunction CountyType(){\n  //this.cities = ['Reading', 'London', 'Oxford', 'Cambridge', 'Portsmouth', 'Exeter', 'Plymouth', 'Brighton', 'Blackpool', 'Birmingham', 'Tiverton', 'Aberdeen', 'Swansea', 'Cardiff', 'Dorchester'];\n}\n\nCountyType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: CountyType,\n\n  Requirements: [\"City\"],\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let city = previous.City;\n    let target = \"null\";\n\n    if (city == \"Reading\"){\n      target = \"Berkshire\";\n    }else if (city == \"London\") {\n      target = \"Greater London\";\n    }else if (city == \"Oxford\") {\n      target = \"Oxfordshire\";\n    }else if (city == \"Cambridge\") {\n      target = \"Cambridgeshire\";\n    }else if (city == \"Portsmouth\") {\n      target = \"Hampshire\";\n    }else if (city == \"Plymouth\" || city == \"Exeter\" || city == \"Tiverton\") {\n      target = \"Devon\";\n    }else if (city == \"Brighton\") {\n      target = \"East Sussex\";\n    }else if (city == \"Blackpool\") {\n      target = \"Lancashire\";\n    }else if (city == \"Birmingham\") {\n      target = \"Warwickshire\";\n    }else if (city == \"Aberdeen\") {\n      target = \"Aberdeenshire\";\n    }else if (city == \"Swansea\") {\n      target = \"West Glamorgan\";\n    }else if (city == \"Cardiff\") {\n      target = \"South Glamorgan\";\n    }else if (city == \"Dorchester\") {\n      target = \"Dorset\";\n    }\n\n    current.County = target;\n\n    return current;\n  }\n});\n\nmodule.exports = CountyType;\n","const FieldType = require(\"../FieldType\");\n\nfunction CurrencyType(){\n  this.currency = ['Baht', 'US Dollar', 'Yen', 'Korean Won', 'Pound', 'Euro', 'Rupee', 'Yuan'];\n}\n\nCurrencyType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: CurrencyType,\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let target = this.currency[Math.floor(Math.random() * this.currency.length)]\n    current.Currency = target;\n\n    return current;\n  }\n});\n\nmodule.exports = CurrencyType;\n","const FieldType = require(\"../FieldType\");\n\nfunction EmailType(){\n\tthis.emailService = ['@gmail', '@yahoo', '@hotmail', '@outlook'];\n  this.emailEnding = ['.com', '.co.uk'];\n}\n\nEmailType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: EmailType,\n\n  Requirements: [\"First Name\", \"Second Name\"],\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let targetService = this.emailService[Math.floor(Math.random() * this.emailService.length)];\n    let targetEnding = this.emailEnding[Math.floor(Math.random() * this.emailEnding.length)];\n\t\t//let anEmail = previous['First Name'] + previous.SecondName + this.targetService + this.targetEnding;\n\t\tlet anEmail = previous['First Name'] + previous['Second Name'] + targetService + targetEnding;\n    current.Email = anEmail;\n\n    return current;\n  }\n});\n\nmodule.exports = EmailType;\n","const FieldType = require(\"../FieldType\");\n\nfunction FirstNameType(){\n  this.maleNames = ['Liam', 'Jacob', 'William', 'Ethan', 'Nathan', 'James', 'Alex'];\n  this.femaleNames = ['Emma', 'Olivia', 'Sophie', 'Isabella', 'Abigail', 'Emily', 'Elizabeth', 'Ella', 'Shasdane'];\n}\n\nFirstNameType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: FirstNameType,\n\n  Requirements: [\"Gender\"],\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let target = \"\";\n    if(previous.Gender == \"Male\"){\n      target = this.maleNames[Math.floor(Math.random() * this.maleNames.length)];\n    }else{\n      target = this.femaleNames[Math.floor(Math.random() * this.femaleNames.length)];\n    }\n    current['First Name'] = target;\n\n    return current;\n  }\n});\n\nmodule.exports = FirstNameType;\n","const FieldType = require(\"../FieldType\");\n\nfunction GenderType(){\n\n}\n\nGenderType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: GenderType,\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let target = \"\";\n    if(Math.random() * 2 <= 1){\n      target = \"Male\";\n    }else{\n      target = \"Female\";\n    }\n    current.Gender = target;\n\n    return current;\n  }\n});\n\nmodule.exports = GenderType;\n","const FieldType = require(\"../FieldType\");\n\nfunction JobType(){\n  this.jobs = [\n  'Teacher', \n  'Doctor', \n  'Nurse', \n  'Designer', \n  'Web Developer', \n  'Sale', \n  'Product Engineer', \n  'Programmer',\n  'Police'\n  ];\n}\n\nJobType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: JobType,\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let target = this.jobs[Math.floor(Math.random() * this.jobs.length)]\n    current.Job = target;\n\n    return current;\n  }\n});\n\nmodule.exports = JobType;\n","const FieldType = require(\"../FieldType\");\n\nfunction LanguageType(){\n  this.languages = ['Thai', 'English', 'Chinese', 'Korean', 'Japanese', 'French'];\n}\n\nLanguageType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: LanguageType,\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let target = this.languages[Math.floor(Math.random() * this.languages.length)];\n    current.Language = target;\n\n    return current;\n  }\n});\n\nmodule.exports = LanguageType;\n","const FieldType = require(\"../FieldType\");\n\nfunction MovieTitleType(){\n  this.movieTitles = [\n  'Harry Potter and the Deadly Hollow Part 2',\n  'Black Panther',\n  'Final Destination 1',\n  'Jumanji',\n  'Jurasic World',\n  'Pasific Rim',\n  'Transformers: The Last Knight',\n  'X-Men Apocalype'\n  ];\n}\n\nMovieTitleType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: MovieTitleType,\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let title = this.movieTitles[Math.floor(Math.random() * this.movieTitles.length)];\n    current['Movie Title'] = title;\n\n    return current;\n  }\n});\n\nmodule.exports = MovieTitleType;\n","const FieldType = require(\"../FieldType\");\n\nfunction PhoneNumberType(){\n}\n\nPhoneNumberType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: PhoneNumberType,\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let target = \"\";\n    target = String(Math.floor(Math.random() * 1000000000) + 9999999999)\n    current['Phone Number'] = \"+44\" + target;\n\n    return current;\n  }\n});\n\nmodule.exports = PhoneNumberType;\n","const FieldType = require(\"../FieldType\");\n\nfunction PostcodeType(){\n    this.characters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n}\n\nPostcodeType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: PostcodeType,\n\n  Requirements: [\"City\"],\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let target = \"\";\n    let cityCode = previous.City.substring(0,2).toUpperCase();\n    let randChar = this.characters[Math.floor(Math.random() * this.characters.length)];\n    let randChars = randChar + randChar;\n    let randNum = String(Math.floor(Math.random() * 9))\n\n    target = cityCode + randNum + \" \" + randNum + randChars;\n\n    current.Postcode = target;\n    return current;\n  }\n});\n\nmodule.exports = PostcodeType;\n","const FieldType = require(\"../FieldType\");\n\nfunction RandomColourType(){\n\tthis.colour = ['Red', 'Yellow', 'Pink', 'Green'];\n}\n\nRandomColourType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: RandomColourType,\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let target = \"\";\n    target = this.colour[Math.floor(Math.random() * this.colour.length)];\n\n    current['Random Colour'] = target;\n    return current;\n  }\n});\n\nmodule.exports = RandomColourType;\n\n// reference CMD for errors as it keeps a record of the changes made\n","const FieldType = require(\"../FieldType\");\n\nfunction ReligionType(){\n  this.religions = ['Nonreligious', 'Prefer not to say', 'Christianity - Protestant', 'Christianity - Catholic', 'Islam', 'Hinduism', 'Chinese Traditional', 'Buddhism', 'Sikhism', 'Judaism', 'Shinto'];\n}\n\nReligionType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: ReligionType,\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let target = this.religions[Math.floor(Math.random() * this.religions.length)]\n    current.Religion = target;\n\n    return current;\n  }\n});\n\nmodule.exports = ReligionType;\n","const FieldType = require(\"../FieldType\");\n\nfunction SecondNameType(){\n  this.secondNames = ['Jones', 'Taylor', 'Williams', 'Brown', 'Smith', 'Evans', 'Thomas', 'Wood'];\n}\n\nSecondNameType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: SecondNameType,\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let secondName = this.secondNames[Math.floor(Math.random() * this.secondNames.length)];\n    current['Second Name'] = secondName;\n\n    return current;\n  }\n});\n\nmodule.exports = SecondNameType;\n","const FieldType = require(\"../FieldType\");\n\nfunction ShirtSizeType(){\n  this.shirtSizes = ['3S', '2S', 'S', 'M', 'L', 'XL', 'XXL', '3XL', 'Free Size'];\n}\n\nShirtSizeType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: ShirtSizeType,\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let target = this.shirtSizes[Math.floor(Math.random() * this.shirtSizes.length)]\n    current['Shirt Size'] = target;\n\n    return current;\n  }\n});\n\nmodule.exports = ShirtSizeType;\n","const FieldType = require(\"../FieldType\");\n\nfunction TestType(){\n\n}\n\nTestType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: TestType,\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n    current.Test = \"This is a test\";\n\n    return current;\n  }\n});\n\nmodule.exports = TestType;\n","const FieldType = require(\"../FieldType\");\n\nfunction TitleType(){\n  this.maleTitles = ['Mr'];\n  this.femaleTitles = ['Miss', 'Ms', 'Mrs'];\n  this.uncommonTitlesMale = ['Dr', 'Sir'];\n  this.uncommonTitlesFemale = ['Dr'];\n}\n\nTitleType.prototype = Object.assign(Object.create(FieldType.prototype), {\n  constructor: TitleType,\n\n  Requirements: [\"Gender\"],\n\n  generate: function(previous){\n    let current = previous;\n    if(typeof previous == 'undefined') current = {};\n\n    let target;\n    if(previous.Gender == \"Male\"){\n      if(Math.floor(Math.random()*9) == 5){\n        target = this.uncommonTitlesMale[Math.floor(Math.random() * this.uncommonTitlesMale.length)];\n      }\n      else{\n        target = this.maleTitles[Math.floor(Math.random() * this.maleTitles.length)];\n      }\n    }else{\n      if(Math.floor(Math.random()*9) == 5){\n        target = this.uncommonTitlesFemale[Math.floor(Math.random() * this.uncommonTitlesFemale.length)];\n      }\n      else{\n        target = this.femaleTitles[Math.floor(Math.random() * this.femaleTitles.length)];\n      }\n    }\n    current.Title = target;\n\n    return current;\n  }\n});\n\nmodule.exports = TitleType;\n","const View = require('./View');\nconst Popup = require('./Popup');\nconst storageManager = require('../StorageManager');\n\nfunction ConfirmDeletePopup(dbId, dbContainer){\n  this.setup(dbId, dbContainer);\n}\n\nConfirmDeletePopup.prototype = Object.assign(Object.create(Popup.prototype), {\n  constructor: ConfirmDeletePopup,\n\n  speed: 0.4,\n\n  setup: function(dbId, dbContainer){\n    Popup.prototype.setup.call(this);\n\n\n    this.dbContainer = dbContainer\n    this.confirmMessage = document.createElement('div');\n    this.confirmMessage.innerHTML = \"Are you sure you want to delete the \" + dbId + \" database?\";\n\n    this.confirmButton = document.createElement('div');\n    this.confirmButton.id = \"acceptDbButton\";\n    this.confirmButton.innerHTML = \"Yes\";\n\n    this.cancelButton = document.createElement('div');\n    this.cancelButton.id = \"declineDbButton\";\n    this.cancelButton.innerHTML = \"No\";\n\n\n    let that = this;\n    this.confirmButton.onclick = function(e){\n      //Actually delete the database.\n      storageManager.removeDatabase(that.dbId);\n      //Remove the child from the list\n      that.dbContainer.parentElement.removeChild(that.dbContainer);\n      that.popout();\n    }\n\n    this.cancelButton.onclick = function(e){\n      that.popout();\n    }\n\n    this.backgroundView.append(this.confirmMessage);\n    this.backgroundView.append(this.confirmButton);\n    this.backgroundView.append(this.cancelButton);\n  },\n\n  popup: function(dbId, dbContainer){\n    Popup.prototype.popup.call(this);\n    this.dbId = dbId;\n    this.dbContainer = dbContainer;\n\n    this.confirmMessage.innerHTML = \"Are you sure you want to delete the \" + this.dbId + \" database?\";\n  },\n\n  backgroundPressed: function(){\n    this.popout();\n  }\n\n});\n\nmodule.exports = ConfirmDeletePopup;\n","const View = require('./View');\nconst databaseEditPopup = require('./DatabaseEditPopup');\nconst storageManager = require('../StorageManager');\nconst Popup = require('./Popup');\n\nfunction DatabaseCreationPopup(pageManager){\n  this.pageManager = pageManager;\n  this.setup();\n}\n\nDatabaseCreationPopup.prototype = Object.assign(Object.create(Popup.prototype), {\n  constructor: DatabaseCreationPopup,\n\n  speed: 0.4,\n\n  setup: function(){\n    Popup.prototype.setup.call(this);\n\n    let databaseTitle = document.createElement('div');\n    databaseTitle.innerHTML = \"What should the database be called?\";\n\n    this.databaseTitleInput = document.createElement('input');\n    this.databaseTitleInput.id = \"dbInput\";\n\n    let acceptDbButton = document.createElement('div');\n    acceptDbButton.id = \"acceptDbButton\";\n    acceptDbButton.innerHTML = \"Confirm\";\n\n    let declineDbButton = document.createElement('div');\n    declineDbButton.id = \"declineDbButton\";\n    declineDbButton.innerHTML = \"Cancel\";\n\n    let that = this;\n    acceptDbButton.onclick = function(e){\n      //Do a regex function to check if the title is valid.\n      if(that.databaseTitleInput.value.match(\"^[a-zA-Z1-9_]+$\")){\n        //Add it to the list.\n        that.dbSelectionView.addToList(that.databaseTitleInput.value);\n        //Create the database in storage\n        storageManager.createDatabase(that.databaseTitleInput.value);\n        that.popout();\n      }else{\n        alert(\"Enter valid characters only please. Characters must be between a-z and A-Z.\");\n        that.popout();\n      }\n    }\n\n    declineDbButton.onclick = function(e){\n      that.popout();\n    }\n\n    this.backgroundView.append(databaseTitle);\n    this.backgroundView.append(this.databaseTitleInput);\n    this.backgroundView.append(acceptDbButton);\n    this.backgroundView.append(declineDbButton);\n  },\n\n  backgroundPressed: function(){\n    this.popout();\n  }\n\n});\n\nmodule.exports = DatabaseCreationPopup;\n","const Popup = require('./Popup');\nconst storageManager = require('../StorageManager');\nconst ConfirmDeletePopup = require('./ConfirmDeletePopup');\n//const pageManager = require('./PageManager');\n\nfunction DatabaseEditPopup(pageManager){\n  this.setup(pageManager);\n}\n\nDatabaseEditPopup.prototype = Object.assign(Object.create(Popup.prototype), {\n  constructor: DatabaseEditPopup,\n\n  speed: 0.4,\n\n  setup: function(pageManager){\n    Popup.prototype.setup.call(this);\n\n    let databaseTitle = document.createElement('div');\n    databaseTitle.innerHTML = \"Database Title:\";\n\n    this.databaseTitleInput = document.createElement('input');\n    this.databaseTitleInput.value = \"\";\n\n    let deleteDatabaseButton = document.createElement('div');\n    deleteDatabaseButton.id = \"deleteDbButton\";\n    deleteDatabaseButton.innerHTML = \"Delete Database\";\n\n    let that = this;\n    deleteDatabaseButton.onclick = function(e){\n      pageManager.popupConfirmDelete(that.dbId, that.dbContainer);\n      that.popout();\n    }\n\n    this.backgroundView.append(databaseTitle);\n    this.backgroundView.append(this.databaseTitleInput);\n    this.backgroundView.append(document.createElement('hr'));\n    this.backgroundView.append(deleteDatabaseButton);\n  },\n\n  popup: function(dbId, dbContainer){\n    Popup.prototype.popup.call(this);\n\n    //Make the title's input equal to the database name.\n    this.databaseTitleInput.value = dbId;\n\n    //Store these values for later.\n    this.dbId = dbId;\n    this.dbContainer = dbContainer;\n  },\n\n  backgroundPressed: function(){\n    this.popout();\n\n    //If the storage manager can correctly update the database then rename it in the graphcs.\n    if(storageManager.renameDatabase(this.dbId, this.databaseTitleInput.value)){\n        this.dbContainer.innerHTML = this.databaseTitleInput.value;\n    }\n  }\n});\n\nmodule.exports = DatabaseEditPopup;\n","const View = require('./View');\nconst storageManager = require('../StorageManager');\nconst DatabaseCreationPopup = require('./DatabaseCreationPopup');\n\nfunction DatabaseSelectionView(pageManager){\n  this.pageManager = pageManager;\n  this.container = document.getElementById(\"dataBaseSelectionView\");\n\n  //Create the list that'll contain the databases.\n  this.list = document.createElement('ul');\n\n  document.getElementById(\"dataBaseSelectionView\").append(this.list);\n  document.getElementById(\"newDbbutton\").onclick = this.createDatabase.bind(this);\n\n  this.updateList();\n}\n\nDatabaseSelectionView.prototype = Object.assign(Object.create(View.prototype), {\n  constructor: DatabaseSelectionView,\n\n  createDatabase: function(){\n    this.pageManager.popupDatabaseCreation(this);\n  },\n\n  addToList: function(dbTitle){\n    let newDb = document.createElement('div');\n    newDb.className = \"DBEntry\";\n    newDb.innerHTML = dbTitle;\n\n    let editDb = document.createElement('img');\n    editDb.className = \"DbEditButton\";\n    editDb.src = \"test.png\";\n\n    let that = this;\n    editDb.onclick = function(e){\n      //Get a reference to the list container and pass it into the popup\n      let dbContainer = e.target.parentElement.childNodes[0];\n\n      that.pageManager.popupDatabaseEdit(dbContainer.innerHTML, dbContainer);\n    }\n\n    //Add a callback for when the button is clicked.\n    newDb.onclick = this.databaseSelected.bind(this);\n\n    let listItem = document.createElement('li');\n    listItem.className = \"DbSelectionList\"\n    listItem.append(newDb);\n\n    listItem.append(editDb);\n\n    this.list.appendChild(listItem);\n  },\n\n  databaseSelected: function(e){\n    this.pageManager.showDiagramView(e.target.innerHTML);\n  },\n\n  updateList: function(){\n    //Add the contents of the storage manager to the list\n    let list = storageManager.getDatabasesList();\n\n    for(t = 0; t < list.length; t++){\n      this.addToList(list[t]);\n    }\n  }\n});\n\nmodule.exports = DatabaseSelectionView;\n","const View = require('./View');\nconst dataGenerator = require('../DataGenerator/DataGenerator')\nconst structureManager = require('../StructureManager')\nconst storageManager = require('../StorageManager')\n\nfunction DiagramView(pageManager){\n  this.container = document.getElementById(\"DiagramView\");\n  this.pageManager = pageManager;\n\n  this.saveButton = document.getElementById(\"saveDatabaseButton\");\n\n  document.getElementById(\"createTableButton\").onclick = this.createTableButton.bind(this);\n  document.getElementById(\"returnToSelectionButton\").onclick = this.returnToSelection.bind(this);\n  document.getElementById(\"generateDataButton\").onclick = this.generateDataButtonPressed.bind(this);\n  this.saveButton.onclick = this.saveDatabasePressed.bind(this);\n\n  this.setupMxGraph();\n}\n\nconstructor: DiagramView,\nDiagramView.prototype = Object.assign(Object.create(View.prototype), {\n  //Used to determine whether the diagram should react to insertions and deletions or not.\n  //If the diagram is being loaded then this would be set to false.\n  ready: false,\n\n  currentDbName: \"\",\n\n  setupMxGraph: function(){\n    //The image that appears when mousing over a table.\n\t\tmxConnectionHandler.prototype.connectImage = new mxImage('connector.gif', 16, 16);\n    //Create the graph\n    this.graph = new mxGraph(document.getElementById(\"DiagramContainer\"));\n    //Can the graph contain connectors (edges)\n    this.graph.setConnectable(true);\n    //Enable rubber band selection.\n    this.rubberband = new mxRubberband(this.graph);\n    //Store a reference to the parent. This is sort of like the root element.\n    var parent = this.graph.getDefaultParent();\n\n    //Allow cells to contain html tags.\n    //These will then be interpreted as html, rather than as a label.\n    this.graph.setHtmlLabels(true);\n    //Don't create edges unless they're attached to something\n    this.graph.setAllowDanglingEdges(false);\n\n    //Styles for the table\n    var tableStyle = new Object();\n    //Hard edges\n    tableStyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n    tableStyle[mxConstants.STYLE_OPACITY] = 0;\n    //Allow the table to fill the entire thing.\n    tableStyle[mxConstants.STYLE_OVERFLOW] = 'fill';\n    //Don't let the user change the label.\n    tableStyle[mxConstants.STYLE_EDITABLE] = 0;\n    //Register this style in the stylesheet\n    this.graph.getStylesheet().putCellStyle('TABLE_STYLE',tableStyle);\n\n    //Same for edges\n    var edgeStyle = this.graph.getStylesheet().getDefaultEdgeStyle();\n    //Hard edges\n    edgeStyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_CONNECTOR;\n    edgeStyle[mxConstants.STYLE_EDGE] = \"elbowEdgeStyle\";\n    edgeStyle[mxConstants.STYLE_STROKECOLOR] = \"black\";\n    this.graph.getStylesheet().putCellStyle('EDGE_STYLE',edgeStyle);\n\n    this.addCallbacks();\n  },\n\n  addCallbacks: function(){\n    var that = this;\n    var keyHandler = new mxKeyHandler(this.graph);\n    //46 is the delete key.\n    keyHandler.bindKey(46, function(evt)\n    {\n      if (that.graph.isEnabled())\n      {\n        //Remove the selected cells.\n        that.graph.removeCells();\n      }\n    });\n\n    //Double click to bring up the table editor popup.\n    this.graph.addListener(mxEvent.DOUBLE_CLICK, function(sender, evt){\n      \tvar cell = evt.getProperty('cell');\n        if(cell!=null && !cell.edge){\n          that.pageManager.popupTableEditorView(cell.getId());\n        }\n    });\n\n    this.graph.addListener(mxEvent.CELLS_ADDED, function(sender, evt){\n      console.log(\"Cell Added\");\n      //Change the colour of the save button.\n      that.dirtySaveButton();\n\n      if(evt.properties.cells[0].edge && that.ready){\n        let edge = evt.properties.cells[0];\n        //The added cell is an edge, so add it to the structure manager.\n        //You don't have to do this for the tables as they are added on the button press.\n        structureManager.addEdge(edge.source.id, edge.target.id);\n      }\n    });\n\n    this.graph.addListener(mxEvent.CELLS_MOVED, function(sender, evt){\n      console.log(\"Cell Moved\");\n      that.dirtySaveButton();\n\n      for(t = 0; t < evt.properties.cells.length; t++){\n        //Don't do anything if an edge is moved, as their position is dependant on the tables they're connected to.\n        if(evt.properties.cells[t].edge) continue;\n\n        //Register the move with the structure manager.\n        structureManager.setTablePosition(evt.properties.cells[t].id, evt.properties.cells[t].geometry.x, evt.properties.cells[t].geometry.y);\n      }\n    });\n\n    this.graph.addListener(mxEvent.CELLS_RESIZED, function(sender, evt){\n      console.log(\"Cell Resized\");\n      that.dirtySaveButton();\n\n      for(t = 0; t < evt.properties.cells.length; t++){\n        if(evt.properties.cells[t].edge) continue; //Again, don't do the edges.\n\n        structureManager.setTableSize(evt.properties.cells[t].id, evt.properties.cells[t].geometry.width, evt.properties.cells[t].geometry.height);\n      }\n    });\n\n    this.graph.addListener(mxEvent.CELLS_REMOVED, function(sender, evt){\n      console.log(\"Cell deleted\");\n      that.dirtySaveButton();\n\n      if(that.ready){\n        //Remove the cells from the structure manager.\n        //They don't need to be removed from the diagram as they'll already be removed at this point.\n        for(t = 0; t < evt.properties.cells.length; t++){\n          if(evt.properties.cells[t].edge) continue;\n\n          structureManager.removeTable(evt.properties.cells[t].id);\n        }\n      }\n    });\n  },\n\n  createTableButton: function(){\n    //Temporary data.\n    let tableData = {title: \"New table\", requiredAmmount: 10, x: 100, y: 100, width: 200, height: 200, types: []};\n    //Create the table and then set it's mxid.\n    tableData.tableId = this.createTable(tableData);\n\n    if(this.ready){\n      //Add the table to the structure manager.\n      structureManager.pushTable(tableData);\n    }\n  },\n\n  createTable: function(e){\n    //Add the table to the graph. This has nothing to do with the storage manager\n    this.graph.getModel().beginUpdate();\n    let table = this.graph.insertVertex(this.graph.getDefaultParent(), null, this.generateTableHTML(e), e.x, e.y, e.width, e.height, 'TABLE_STYLE');\n    this.graph.getModel().endUpdate();\n\n    return table.getId();\n  },\n\n  createEdge: function(e, source, target){\n    //Create an edge and return it's mxid.\n    this.graph.getModel().beginUpdate();\n    let edge = this.graph.insertEdge(this.graph.getDefaultParent(), null, '', this.graph.getModel().getCell(source), this.graph.getModel().getCell(target), 'EDGE_STYLE');\n    this.graph.getModel().endUpdate();\n\n    return edge.getId();\n  },\n\n  returnToSelection: function(){\n    //Leave the diagram editor.\n    this.pageManager.showDatabaseSelectionView();\n  },\n\n  generateDataButtonPressed: function(){\n    //Callback for the data generation popup.\n    this.pageManager.popupGeneratedData();\n  },\n\n  generateTableHTML: function(table){\n    //Generate html code for a table based on it's values and then return it.\n    var string = '';\n    string += '<table>';\n    string += '<tr><th>'+table.title+'</th></tr>';\n\n    for(count = 0; count < table.types.length; count++){\n      string += '<tr><td>'+table.types[count].fieldName+'</td></tr>';\n    }\n\n    string += '</table>';\n\n    return string;\n  },\n\n  setGraphEnabled: function(enabled){\n    this.graph.setEnabled(enabled);\n  },\n\n  updateTable: function(id){\n    //Set the table html of a certain table.\n    let cell = this.graph.getModel().getCell(id);\n\n    this.graph.getModel().setValue(cell, this.generateTableHTML(structureManager.getTableById(id)));\n    this.graph.refresh();\n  },\n\n  dirtySaveButton: function(){\n    this.saveButton.style.backgroundColor = \"#ED8291\";\n  },\n\n  cleanSaveButton: function(){\n    this.saveButton.style.backgroundColor = \"#bcbcbc\";\n  },\n\n  saveDatabasePressed: function(){\n    //Save the database\n    this.cleanSaveButton();\n\n    //Update the storage manager.\n    storageManager.saveDatabaseStructure(this.currentDbName);\n  },\n\n  show: function(dbName){\n    //Make the diagram visible\n    this.cleanSaveButton();\n    this.currentDbName = dbName;\n    this.container.style.visibility = \"visible\";\n    this.setGraphEnabled(true);\n    this.graph.getModel().setVisible(this.graph.getDefaultParent(), true);\n  },\n\n  hide: function(){\n    this.container.style.visibility = \"hidden\";\n    this.setGraphEnabled(false);\n    this.graph.getModel().setVisible(this.graph.getDefaultParent(), false);\n  },\n\n  clearDiagram: function(){\n    //Remove all the cells in the diagram.\n    this.graph.removeCells(this.graph.getChildVertices(this.graph.getDefaultParent()));\n  }\n});\n\nmodule.exports = DiagramView;\n","const Popup = require('./Popup');\nconst structureManager = require('../StructureManager');\n\nfunction ForeignKeySelectionPopup(pageManager){\n  this.setup(pageManager);\n}\n\nForeignKeySelectionPopup.prototype = Object.assign(Object.create(Popup.prototype), {\n  constructor: ForeignKeySelectionPopup,\n\n  listObjects: [],\n\n  setup: function(pageManager){\n    this.pageManager = pageManager;\n    Popup.prototype.setup.call(this);\n\n    let title = document.createElement('div');\n    title.innerHTML = \"Select a table\";\n    title.style.fontSize = \"15pt\";\n\n    this.backgroundView.append(title);\n  },\n\n  popup: function(tableId, editPopup){\n    //Remove all the elements that are already in the popup based on the list.\n    for(t = 0; t < this.listObjects.length; t++){\n      this.listObjects[t].parentNode.removeChild(this.listObjects[t]);\n    }\n    //Set the list to empty after they've been removed.\n    this.listObjects = [];\n\n    Popup.prototype.popup.call(this);\n\n    //Re-add the elements based on the structure.\n    let structure = structureManager.getStructure();\n\n    for(t = 0; t < structure.tables.length; t++){\n      //Don't include the currently edited table into the list.\n      if(structure.tables[t].tableId == tableId) continue;\n\n      let elem = document.createElement('div');\n      elem.className = \"tableEntry\";\n      elem.innerHTML = structure.tables[t].title;\n\n      let s = t;\n      let that = this;\n      elem.onclick = function(){\n        that.popout();\n\n        //Add the entry to the list\n        editPopup.newRow(\"\", \"Foreign Key\", true, structure.tables[s].tableId);\n      };\n\n      this.backgroundView.append(elem);\n\n      this.listObjects.push(elem);\n    }\n  },\n\n  backgroundPressed: function(){\n    this.popout();\n  }\n});\n\nmodule.exports = ForeignKeySelectionPopup;\n","const View = require('./View');\nconst storageManager = require('../StorageManager');\nconst Popup = require('./Popup');\n\nfunction GeneratedDataPopup(pageManager){\n  this.pageManager = pageManager;\n  this.setup();\n}\n\nGeneratedDataPopup.prototype = Object.assign(Object.create(Popup.prototype), {\n  constructor: GeneratedDataPopup,\n\n  speed: 0.4,\n\n  setup: function(){\n    Popup.prototype.setup.call(this);\n\n    let generatedDataTitle = document.createElement('div');\n    generatedDataTitle.innerHTML = \"Generated Data:\";\n    generatedDataTitle.id = \"generatedDataTitle\"; //set up the title element for data popup\n    generatedDataTitle.style['font-size'] = \"15pt\";\n    generatedDataTitle.style['margin-bottom'] = \"0.5em\";\n\n    this.dataDisplay = document.createElement('div');\n    this.dataDisplay.id = \"dataDisplay\";  //set up the data display element for data popup\n\n    let closeButton = document.createElement('div');\n    closeButton.id = \"declineDbButton\"; //set up the close button element for data popup\n    closeButton.innerHTML = \"Close\";\n\n    closeButton.style['margin-top'] = \"1em\";\n\n    let that = this;\n    closeButton.onclick = function(e){  //when close button is clicked, close the popup\n      that.popout();\n    }\n\n    this.backgroundView.style.width = \"70%\";\n\n    this.backgroundView.append(generatedDataTitle);\n    this.backgroundView.append(this.dataDisplay); //append elements to the index.html\n    this.backgroundView.append(closeButton);\n  },\n\n  popup: function(data){\n    Popup.prototype.popup.call(this);\n    let outputData = \"\";\n    for(t = 0; t < data.tables.length; t++){\n      for(i = 0; i < data.tables[t].done.length; i++){\n        outputData += JSON.stringify(data.tables[t].done[i]); //convert the generated data JSON object into a string\n        outputData += \"<br>\";\n      }\n    }\n    outputData = outputData.split('{').join('').split('}').join('').split('\"').join(' '); //remove unwanted characters\n    this.dataDisplay.innerHTML = outputData;\n  },\n\n  backgroundPressed: function(){\n    this.popout();   //when the user clicks away from the popup, close the popup\n  }\n\n});\n\nmodule.exports = GeneratedDataPopup;\n","const TestView = require('./TestView');\nconst DiagramView = require('./DiagramView');\nconst DataBaseSelectionView = require('./DatabaseSelectionView');\nconst TableEditorView = require('./TableEditorView');\nconst dateGenerator = require('../DataGenerator/DataGenerator');\nconst structureManager = require('../StructureManager');\nconst storageManager = require('../StorageManager');\nconst DatabaseCreationPopup = require('./DatabaseCreationPopup');\nconst TypeSelectionPopup = require('./TypeSelectionPopup');\nconst DatabaseEditPopup = require('./DatabaseEditPopup');\nconst ConfirmDeletePopup = require('./ConfirmDeletePopup');\nconst ForeignKeySelectionPopup = require('./ForeignKeySelectionPopup');\nconst GeneratedDataPopup = require('./GeneratedDataPopup');\nconst DataGenerator = require('../DataGenerator/DataGenerator');\n\nfunction PageManager(){\n  //Create new instances of the views it has to manage\n  this.testView = new TestView();\n  this.diagramView = new DiagramView(this);\n  this.dataBaseSelectionView = new DataBaseSelectionView(this);\n  this.tableEditorView = new TableEditorView(this);\n  this.databaseCreationPopup = new DatabaseCreationPopup(this);\n  this.typeSelectionPopup = new TypeSelectionPopup(this);\n  this.databaseEditPopup = new DatabaseEditPopup(this);\n  this.confirmDeletePopup = new ConfirmDeletePopup(this);\n  this.foreignKeySelectionPopup = new ForeignKeySelectionPopup(this);\n  this.generatedDataPopup = new GeneratedDataPopup(this);\n\n  //The data generator is created and stored by the page manager.\n  this.dataGenerator = new DataGenerator(this);\n}\n\nPageManager.prototype = {\n  constructor: PageManager,\n\n  showTestView: function(){\n    this.testView.show();\n  },\n\n  showDiagramView: function(dbName){\n    //If no database could be loaded then don't show the view.\n    if(!this.loadDatabase(dbName)) {\n      alert(\"There was a problem loading this database.\");\n      return;\n    }\n    this.dataBaseSelectionView.hide();\n    this.diagramView.show(dbName);\n  },\n\n  showDatabaseSelectionView: function(){\n    this.diagramView.hide();\n    this.dataBaseSelectionView.show();\n  },\n\n  popupTableEditorView: function(id){\n    //Disable editing the graph when it's not active.\n    this.diagramView.setGraphEnabled(false);\n    this.tableEditorView.popup(id);\n  },\n\n  popoutTableSelection: function(){\n    //Re-enable graph editing.\n    this.diagramView.setGraphEnabled(true);\n    this.diagramView.updateTable(this.tableEditorView.currentId);\n    this.tableEditorView.popout();\n  },\n\n  popupTypeSelection: function(typeContainer){\n    this.typeSelectionPopup.popup(typeContainer);\n  },\n\n  popoutTypeSelection: function(){\n    this.typeSelectionPopup.popout();\n  },\n\n  loadDatabase: function(title){\n    //Load the database into the diagram\n    //Set the diagram to not ready (meaning it won't process events when tables are added, as here they're not being added by the user).\n    this.diagramView.ready = false;\n    //Get the database from storage and check it exists.\n    let db = storageManager.retrieveDatabase(title);\n    if(db == null) return false;\n\n    //Remove everything from the current diagram.\n    this.diagramView.clearDiagram();\n\n    //Add the tables.\n    for(i = 0; i < db.tables.length; i++){\n      db.tables[i].tableId = this.diagramView.createTable(db.tables[i]);\n    }\n\n    //Add the current tables to the structure manager.\n    //This is so the edges can be added correctly (they need tables with mxids to reference).\n    structureManager.setStructure(db);\n\n    //Go through the connectors\n    for(t = 0; t < db.connectors.length; t++){\n      //Determine the start and destination tables.\n      let start = db.tables[db.connectors[t].originTable].tableId;\n      let target = db.tables[db.connectors[t].destinationTable].tableId;\n\n      //Get the diagram view to create these edges.\n      db.connectors[t].connectorId = this.diagramView.createEdge(db.connectors[t], start, target);\n    }\n\n    //Make the diagram view accept events again.\n    this.diagramView.ready = true;\n    structureManager.setStructure(db);\n\n    return true;\n  },\n\n  popupDatabaseEdit: function(dbId, dbContainer){\n    this.databaseEditPopup.popup(dbId, dbContainer);\n  },\n\n  popupDatabaseCreation: function(dbSelectionView){\n    //This is so it knows which view to reference.\n    this.databaseCreationPopup.dbSelectionView = dbSelectionView;\n    this.databaseCreationPopup.popup(this);\n  },\n\n  popupConfirmDelete: function(dbId, dbContainer){\n   this.confirmDeletePopup.popup(dbId, dbContainer);\n  },\n\n  createDataGenerator: function(){\n    this.dataGenerator.generateData(this);\n  },\n\n  popupGeneratedData: function(generatedData){\n    //Generate the data and then present it to the user\n    let data = this.dataGenerator.generateData();\n    this.generatedDataPopup.popup(data);\n  },\n\n  popupForeignKeySelection: function(tableId, editPopup){\n    this.foreignKeySelectionPopup.popup(tableId, editPopup);\n  },\n\n  dirtyDiagramSaveButton: function(){\n    this.diagramView.dirtySaveButton();\n  },\n\n};\n\nmodule.exports = new PageManager();\n","function Popup(){\n  this.setup();\n}\n\nPopup.prototype = {\n  //How long the animation takes to complete.\n  speed: 0.2,\n\n  setup: function(){\n    //Create the base of what makes a popup\n    //The background view\n    //The actual container\n    this.container = document.createElement('div');\n    this.container.className = \"popup\";\n\n    let that = this;\n    this.container.onclick = function(e){\n      if(e.target == that.container) that.backgroundPressed();\n    };\n\n    this.backgroundView = document.createElement('div');\n    this.backgroundView.className = \"popupBackground\";\n\n    this.container.appendChild(this.backgroundView);\n    document.body.appendChild(this.container);\n  },\n\n  popup: function(){\n    this.container.style.visibility = \"visible\";\n    this.container.style.animation = \"fadeIn \"+this.speed+\"s\";\n  },\n\n  popout: function(){\n    this.container.style.animation = \"fadeOut \"+this.speed+\"s\";\n\n    var that = this;\n    //After the time it takes the animation to complete, hide the popup fully.\n    setTimeout(function(){\n      that.container.style.visibility = \"hidden\";\n    }, this.speed * 1000);\n  },\n\n  //A stub function to be overriden\n  backgroundPressed: function(){\n  },\n};\n\nmodule.exports = Popup;\n","const View = require('./View');\nconst structureManager = require('../StructureManager');\n\nfunction TableEditorView(pageManager){\n  this.pageManager = pageManager;\n\n  this.container = document.getElementById(\"TableEditorView\");\n  this.tableContainer = document.getElementById(\"TableEditorTableContainer\");\n  this.tableTitleInput = document.getElementById(\"tableTitleField\");\n\n  let that = this;\n  //If something is typed in the title input then run the change made method.\n  this.tableTitleInput.oninput = function(){\n    that.changeMade();\n  };\n\n  //The id of the table being edited.\n  this.currentId = 0;\n\n  //A list of the boxes so that they can be accessed later\n  this.nameBoxes = [];\n  this.typeBoxes = [];\n\n  //Create the base of the table, the headers are added during the clear\n  this.table = document.createElement('table');\n  this.tableContainer.append(this.table);\n\n  this.clearRows();\n\n  this.container.onclick = this.backgroundPressed.bind(this);\n  document.getElementById(\"newRowButton\").onclick = this.newRowButtonPressed.bind(this);\n  document.getElementById(\"addForeignKeyButton\").onclick = this.ForeignKeyButtonPressed.bind(this);\n}\n\nTableEditorView.prototype = Object.assign(Object.create(View.prototype), {\n  constructor: TableEditorView,\n  speed: 0.2,\n\n  //Make the view appear as a popup, rather than as something that fills the entire screen.\n  popup: function(id){\n    this.currentId = id;\n    //Get the current table from the structure manager.\n    let table = structureManager.getTableById(id);\n    if(!table) return;\n\n    //Add the rows to the editor\n    this.setupRows(table.types);\n    this.tableTitleInput.value = table.title;\n\n    this.show();\n    this.container.style.animation = \"fadeIn \"+this.speed+\"s\";\n  },\n\n  setupRows: function(fieldTypes){\n    //Remove the old rows\n    this.clearRows();\n    for(r = 0; r < fieldTypes.length; r++){\n      let foreignKey = false;\n      //Go through the entries and add the rows accordingly.\n      if(fieldTypes[r].fieldType == \"Foreign Key\") foreignKey = true;\n      this.newRow(fieldTypes[r].fieldName, fieldTypes[r].fieldType, foreignKey);\n    }\n  },\n\n  clearRows: function(){\n    //Remove everything from the container\n    while (this.table.firstChild) {\n      this.table.removeChild(this.table.firstChild);\n    }\n\n    //Create a new table (as the old one was removed) and add it to the container.\n    var heading = document.createElement('tr');\n    var heading1 = document.createElement('th');\n    heading1.innerHTML = \"Field Name\";\n    var heading2 = document.createElement('th');\n    heading2.innerHTML = \"Field Type\";\n\n    heading.append(heading1);\n    heading.append(heading2);\n    this.table.append(heading);\n  },\n\n  newRow: function(name, fieldType, foreignKey, tableId){\n    //Create the components that'll go in the new rows.\n    var row = document.createElement('tr');\n    var first = document.createElement('td');\n    var second = document.createElement('td');\n\n    var third = document.createElement('td');\n    //Create the cross button.\n    let image = document.createElement('img');\n    image.src = \"cross.png\";\n    image.className = \"FieldRemoveCross\";\n    third.append(image);\n\n    let nameInput = document.createElement('input');\n    nameInput.value = name;\n    first.append(nameInput);\n\n    let typeButton = document.createElement('div');\n    typeButton.innerHTML = fieldType;\n    typeButton.className = \"FieldTypeButton\";\n    second.append(typeButton);\n\n    //Make the row look different if it contains a foreign key\n    let that = this;\n    if(!foreignKey){\n      typeButton.onclick = function(e){\n        that.pageManager.popupTypeSelection(e.target);\n      }\n    }else{\n      typeButton.tableId = tableId;\n      typeButton.style['background-color'] = \"#82D47F\";\n      typeButton.style['cursor'] = \"default\";\n    }\n\n    image.onclick = function(e){\n      //Get the parent's parent of the clicked element (the row) and remove it.\n      let targetRow = e.target.parentElement.parentElement;\n      that.table.removeChild(targetRow);\n\n      //Remove it from the name and type boxes.\n      for(t = 0; t < that.nameBoxes.length; t++){\n        //Check if the name box's row is the same as the one to delete.\n        if(that.nameBoxes[t].parentElement.parentElement == targetRow){\n          that.nameBoxes.splice(t, 1);\n          that.typeBoxes.splice(t, 1);\n          break;\n        }\n      }\n      that.changeMade();\n    }\n\n    //Add the components to the row and then append it.\n    this.nameBoxes.push(nameInput);\n    this.typeBoxes.push(typeButton);\n\n    row.append(first);\n    row.append(second);\n    row.append(third);\n    this.table.append(row);\n  },\n\n  updateStructureManager: function(){\n    //Temporary data that's added to by the loop.\n    let tempTable = [];\n\n    //Go through the name boxes and add their data to the structure manager.\n    for(t = 0; t < this.nameBoxes.length; t++){\n      let data = {fieldName: this.nameBoxes[t].value, fieldType: this.typeBoxes[t].innerHTML};\n\n      //If it's a foreign key include the id.\n      if(this.typeBoxes[t].innerHTML == \"Foreign Key\"){\n        data.tableId = this.typeBoxes[t].tableId;\n      }\n      tempTable.push(data);\n    }\n\n    //Set the data in the structure manager.\n    structureManager.setTableTitle(this.currentId, this.tableTitleInput.value);\n    structureManager.setTableTypes(this.currentId, tempTable);\n  },\n\n  popout: function(){\n    this.currentId = 0;\n    this.container.style.animation = \"fadeOut \"+this.speed+\"s\";\n\n    this.nameBoxes = [];\n    this.typeBoxes = [];\n\n    //Hide after the ammount of time the animation takes. This is just so the user can actually see the animation.\n    var that = this;\n    setTimeout(function(){\n      that.hide();\n    }, this.speed * 1000);\n  },\n\n  backgroundPressed: function(e){\n    //Make the event not fire on a child of the background.\n    if(e.target != this.container) return;\n\n    //Update the structure manager when the popup is closed.\n    this.updateStructureManager();\n    this.pageManager.popoutTableSelection();\n  },\n\n  newRowButtonPressed: function(){\n    //Create a blank row that isn't a foreign key.\n    this.newRow(\"\", \"Field Type\", false);\n    this.changeMade();\n  },\n\n  ForeignKeyButtonPressed: function(){\n    this.pageManager.popupForeignKeySelection(this.currentId, this);\n    this.changeMade();\n  },\n\n  changeMade: function(){\n    this.pageManager.dirtyDiagramSaveButton();\n  }\n});\n\nmodule.exports = TableEditorView;\n","const View = require('./View');\n\nfunction TestView(){\n  this.container = document.getElementById(\"testView\");\n\n  //Call a callback function on press.\n  document.getElementById(\"testButton\").onclick = this.buttonPressed.bind(this);\n}\n\nTestView.prototype = Object.assign(Object.create(View.prototype), {\n  constructor: TestView,\n\n  buttonPressed: function(){\n    this.hide();\n\n    //You need to store a reference to is because the scope for setTimeout is different.\n    var that = this;\n    setTimeout(function(){\n      that.show();\n    }, 2000);\n  }\n});\n\nmodule.exports = TestView;\n","const Popup = require('./Popup');\nconst typeManager = require('../TypeManager/TypeManager');\n\nfunction TypeSelectionPopup(pageManager){\n  this.pageManager = pageManager;\n\n  this.setup();\n}\n\nTypeSelectionPopup.prototype = Object.assign(Object.create(Popup.prototype), {\n  setup: function(){\n    Popup.prototype.setup.call(this);\n\n    let title = document.createElement('div');\n    title.innerHTML = \"Select a Field Type\";\n\n    let container = document.createElement('div');\n    container.id = \"fieldTypeContainer\";\n\n    //Get a list of the available field types\n    let list = typeManager.getTypesList();\n\n    //Iterate over the list and add them to the container.\n    for(t = 0; t < list.length; t++){\n      let item = document.createElement('div');\n      item.innerHTML = list[t];\n      item.id = \"TypeListItem\";\n\n      let row = Math.floor(t / 3);\n      let column = t % 3;\n\n      //Use a css grid to position the items.\n      item.style['grid-row'] = row;\n      item.style['grid-column'] = column;\n\n      let that = this;\n      item.onclick = function(e){\n        //Set the name of the type as the lable of the container.\n        that.typeContainer.innerHTML = e.target.innerHTML;\n\n        that.pageManager.popoutTypeSelection();\n        that.pageManager.dirtyDiagramSaveButton();\n      }\n\n      container.append(item);\n    }\n\n    //AA-D80073\n\n    this.backgroundView.append(title);\n    this.backgroundView.append(container);\n  },\n\n  popup: function(typeContainer){\n    Popup.prototype.popup.call(this);\n    this.typeContainer = typeContainer;\n  },\n\n  backgroundPressed: function(){\n    this.pageManager.popoutTypeSelection();\n  }\n});\n\nmodule.exports = TypeSelectionPopup;\n","function View(){\n  this.container = 0;\n}\n\nView.prototype = {\n  constructor: View,\n\n  //These two functions are also run by popups\n  hide: function(){\n    this.container.style.visibility = \"hidden\";\n  },\n\n  show: function(){\n    this.container.style.visibility = \"visible\";\n  },\n};\n\nmodule.exports = View;\n"]}